type: edu
custom_name: stage5
files:
- name: src/tictactoe/Main.java
  visible: true
  text: |
    package tictactoe;

    public class Main {
        public static void main(String[] args) {
            // write your code here
        }
    }
  learner_created: false
- name: test/TicTacToeTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;
    import tictactoe.Main;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.stream.Collectors;

    enum FieldState {
        X, O, FREE;

        static FieldState get(char symbol) {
            switch (symbol) {
                case 'X': return X;
                case 'O': return O;
                case ' ':
                case '_':
                    return FREE;
                default: return null;
            }
        }
    }

    class TicTacToeField {

        final FieldState[][] field;

        TicTacToeField(FieldState[][] field) {
            this.field = new FieldState[3][3];
            for (int row = 0; row < 3; row++) {
                for (int col = 0; col < 3; col++) {
                    this.field[row][col] = field[row][col];
                }
            }
        }

        TicTacToeField(String str) {
            field = new FieldState[3][3];

            for (int row = 0; row < 3; row++) {
                for (int col = 0; col < 3; col++) {
                    field[row][col] =
                        FieldState.get(str.charAt(((2 - row) * 3 + col)));
                }
            }
        }

        boolean equalTo(TicTacToeField other) {
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (field[i][j] != other.field[i][j]) {
                        return false;
                    }
                }
            }
            return true;
        }

        boolean hasNextAs(TicTacToeField other) {
            boolean improved = false;
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (field[i][j] != other.field[i][j]) {
                        if (field[i][j] == FieldState.FREE && !improved) {
                            improved = true;
                        }
                        else {
                            return false;
                        }
                    }
                }
            }
            return improved;
        }

        boolean isCloseTo(TicTacToeField other) {
            return equalTo(other)
                || hasNextAs(other)
                || other.hasNextAs(this);
        }

        static TicTacToeField parse(String fieldStr) {

            try {
                List<String> lines = fieldStr
                    .lines()
                    .map(String::strip)
                    .filter(e ->
                        e.startsWith("|")
                            && e.endsWith("|"))
                    .collect(Collectors.toList());

                for (String line : lines) {
                    if (line.length() != 9) {
                        throw new WrongAnswer("Line of Tic-Tac-Toe " +
                            "field should be 9 characters long\n" +
                            "found " + line.length() + " characters in \"" + line + "\"");
                    }
                    for (char c : line.toCharArray()) {
                        if (c != 'X'
                            && c != 'O'
                            && c != '|'
                            && c != ' '
                            && c != '_') {
                            return null;
                        }
                    }
                }

                FieldState[][] field = new FieldState[3][3];

                int y = 2;
                for (String line : lines) {
                    char[] cols = new char[] {
                        line.charAt(2),
                        line.charAt(4),
                        line.charAt(6)
                    };

                    int x = 0;
                    for (char c : cols) {
                        FieldState state = FieldState.get(c);
                        if (state == null) {
                            return null;
                        }
                        field[y][x] = state;
                        x++;
                    }
                    y--;
                }

                return new TicTacToeField(field);
            } catch (Exception ex) {
                return null;
            }
        }

        static List<TicTacToeField> parseAll(String output) {
            List<TicTacToeField> fields = new ArrayList<>();

            List<String> lines = output
                .lines()
                .map(String::strip)
                .filter(e -> e.length() > 0)
                .collect(Collectors.toList());

            String candidateField = "";
            boolean insideField = false;
            for (String line : lines) {
                if (line.contains("----") && !insideField) {
                    insideField = true;
                    candidateField = "";
                } else if (line.contains("----") && insideField) {
                    TicTacToeField field = TicTacToeField.parse(candidateField);
                    if (field != null) {
                        fields.add(field);
                    }
                    insideField = false;
                }

                if (insideField && line.startsWith("|")) {
                    candidateField += line + "\n";
                }
            }

            return fields;
        }

    }


    class Clue {
        int x, y;
        Clue(int x, int y) {
            this.x = x;
            this.y = y;
        }
    }

    public class TicTacToeTest extends StageTest<Clue> {
        public TicTacToeTest() throws Exception {
            super(Main.class);
        }

        static String[] inputs = new String[] {
            "1 1", "1 2", "1 3",
            "2 1", "2 2", "2 3",
            "3 1", "3 2", "3 3"
        };

        String iterateCells(String initial) {
            int index = -1;
            for (int i = 0; i < inputs.length; i++) {
                if (initial.equals(inputs[i])) {
                    index = i;
                    break;
                }
            }
            if (index == -1) {
                return "";
            }
            String fullInput = "";
            for (int i = index; i < index + 9; i++) {
                fullInput += inputs[i % inputs.length] + "\n";
            }
            return fullInput;
        }

        @Override
        public List<TestCase<Clue>> generate() {

            List<TestCase<Clue>> tests = new ArrayList<>();

            int i = 0;
            for (String input : inputs) {
                String fullMoveInput = iterateCells(input);

                String[] strNums = input.split(" ");
                int x = Integer.parseInt(strNums[0]);
                int y = Integer.parseInt(strNums[1]);

                if (i % 2 == 1) {
                    // mix with incorrect data
                    fullMoveInput = "4 " + i + "\n" + fullMoveInput;
                }

                String fullGameInput = "";
                for (int j = 0; j < 9; j++) {
                    fullGameInput += fullMoveInput;
                }

                String initial;

                switch (i % 6) {
                    case 0: initial = "start user easy\n"; break;
                    case 1: initial = "start easy user\n"; break;
                    case 2: initial = "start user medium\n"; break;
                    case 3: initial = "start medium user\n"; break;
                    case 4: initial = "start user hard\n"; break;
                    case 5: initial = "start hard user\n"; break;
                    default: continue;
                }

                fullGameInput = initial + fullGameInput + "exit";

                tests.add(new TestCase<Clue>()
                    .setInput(fullGameInput));

                i++;
            }

            tests.add(new TestCase<Clue>()
                .setInput("start easy easy\nexit"));

            tests.add(new TestCase<Clue>()
                .setInput("start medium medium\nexit"));

            tests.add(new TestCase<Clue>()
                .setInput("start hard hard\nexit"));


            tests.add(new TestCase<Clue>()
                .setInput("start medium easy\nexit"));

            tests.add(new TestCase<Clue>()
                .setInput("start easy medium\nexit"));

            tests.add(new TestCase<Clue>()
                .setInput("start medium hard\nexit"));

            tests.add(new TestCase<Clue>()
                .setInput("start hard medium\nexit"));

            tests.add(new TestCase<Clue>()
                .setInput("start easy hard\nexit"));

            tests.add(new TestCase<Clue>()
                .setInput("start hard easy\nexit"));


            tests.add(new TestCase<Clue>()
                .setInput("start user user\n" +
                    "1 1\n" +
                    "2 2\n" +
                    "1 2\n" +
                    "2 1\n" +
                    "1 3\n" +
                    "exit"));

            return tests;
        }

        @Override
        public CheckResult check(String reply, Clue clue) {

            List<TicTacToeField> fields = TicTacToeField.parseAll(reply);

            if (fields.size() == 0) {
                return new CheckResult(false, "No fields found");
            }

            for (int i = 1; i < fields.size(); i++) {
                TicTacToeField curr = fields.get(i - 1);
                TicTacToeField next = fields.get(i);

                if (!(curr.equalTo(next) || curr.hasNextAs(next))) {
                    return new CheckResult(false,
                        "For two fields following each " +
                            "other one is not a continuation " +
                            "of the other (they differ more than in two places).");
                }
            }

            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/tictactoe/Medium.java
  visible: true
  text: |
    package tictactoe;

    public class Medium extends Computer {
        @Override
        int[] parseCoordinates() {
            int[] xy = new int[2];

            for (int i = 0; i < 3; ++i) {
                int countX = 0, countO = 0, countXa = 0, countOa = 0;
                for (int j = 0; j < 3; ++j) {

                    if (cells[i][j] == 'X') {
                        ++countX;
                    }
                    if (cells[i][j] == 'O') {
                        ++countO;
                    }
                    if (cells[j][i] == 'X') {
                        ++countXa;
                    }
                    if (cells [j][i] == 'O') {
                        ++countOa;
                    }

                    if (countX > 1 || countO > 1) {
                        for (int x = 0; x < 3; x++) {
                            if (!cellIsOccupied(i, x)) {
                                xy[0] = i;
                                xy[1] = x;
                                return xy;
                            }
                        }
                    }
                    if (countXa > 1 || countOa > 1) {
                        for (int x = 0; x < 3; x++) {
                            if (!cellIsOccupied(x, i)) {
                                xy[0] = x;
                                xy[1] = i;
                                return xy;
                            }
                        }
                    }

                }
            }
            return super.parseCoordinates();
        }
    }
  learner_created: true
- name: src/tictactoe/Computer.java
  visible: true
  text: |+
    package tictactoe;

    import java.util.Random;

    public class Computer extends Tictactoe {

        @Override
        int[] parseCoordinates() {
            Random r = new Random();
            int[] xy = new int[2];
            while (true) {
                int x = r.nextInt(3) + 1;
                int y = r.nextInt(3) + 1;

                if (!(cellIsOccupied(x-1, y-1))) {
                    xy[0] = x - 1;
                    xy[1] = y - 1;
                    return xy;
                }
            }
        }



    }

  learner_created: true
- name: src/tictactoe/Easy.java
  visible: true
  text: |
    package tictactoe;

    public class Easy extends Computer {
    }
  learner_created: true
- name: src/tictactoe/Tictactoe.java
  visible: true
  text: |
    package tictactoe;

    import java.util.InputMismatchException;
    import java.util.Scanner;

    public class Tictactoe {

        Scanner scanner = new Scanner(System.in);
        static char[][] cells = {{'_', '_', '_'}, {'_', '_', '_'}, {'_', '_', '_'}};

        void printCells() {
            System.out.println("---------");
            for (int i = 2; i >= 0; --i) {
                System.out.printf("| %c %c %c |\n", cells[0][i], cells[1][i], cells[2][i]);
            }
            System.out.println("---------");
        }

        int[] parseCoordinates() {
            int[] xy = new int[2];
            System.out.println("Enter the coordinates:");
            try {
                int x = scanner.nextInt(), y = scanner.nextInt();

                if (((x < 1 || x > 3) || (y < 1 || y > 3))) {
                    System.out.println("Coordinates should be from 1 to 3!");
                    return parseCoordinates();
                } else if (cellIsOccupied(x-1, y-1)) {
                    System.out.println("This cell is occupied! Choose another one!");
                    return parseCoordinates();
                } else {
                    xy[0] = x-1;
                    xy[1] = y-1;
                    return xy;
                }

            } catch (InputMismatchException e) {
                System.out.println("You should enter numbers!");
                scanner.next();
                return parseCoordinates();
            }
        }

        boolean cellIsOccupied(int x, int y) {
            if (cells[x][y] == '_' || cells[x][y] == 0) {
                return false;
            } else {
                return true;
            }
        }

        void updateCells(int x, int y) {
            cells[x][y] = getNextSymbol();
        }

        char getNextSymbol() {
            int Xcount = 0, Ocount = 0;
            for (char[] c: cells) {
                for (char ch: c) {
                    if (ch == 'X') {
                        ++Xcount;
                    }
                    if (ch == 'O') {
                        ++Ocount;
                    }
                }
            }

            if (Ocount < Xcount) {
                return 'O';
            } else {
                return 'X';
            }
        }

        static boolean winpattern(char c, char[][] arr) {

            boolean pattern = false;
            int across = 0;
            int down = 0;

            if ((arr[0][0] == arr[1][1]) && (arr[1][1] == arr[2][2]) && (arr[1][1] == c)) {
                pattern = true;
                return pattern;
            }

            if ((arr[0][2] == arr[1][1]) && (arr[1][1] == arr[2][0]) && (arr[1][1] == c)) {
                pattern = true;
                return pattern;
            }

            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (arr[i][j] == c) {
                        ++across;
                    }
                    if (arr[j][i] == c) {
                        ++down;
                    }
                }
                if (across == 3 || down == 3) {
                    pattern = true;
                    return pattern;
                }
                across = 0;
                down = 0;
            }

            return pattern;
        }

        void state() {
            if (winpattern('X', cells)) {
                System.out.println("X wins");
                System.out.println();
            } else if (winpattern('O', cells)) {
                System.out.println("O wins");
                System.out.println();
            } else if (isFull()) {
                System.out.println("Draw");
                System.out.println();
            } else {
                return;
            }
        }

        boolean isOver() {
            boolean over = false;
            if (winpattern('X', cells)) {
                return true;
            } else if (winpattern('O', cells)) {
                return true;
            } else if (isFull()) {
                return true;
            } else {
                return false;
            }
        }

        boolean isFull() {
            boolean full = true;
            for (char[] c: cells) {
                for (char ch: c) {
                    if (ch == '_' || ch == 0) {
                        full = false;
                    }
                }
            }
            return full;
        }

        void play() {
            int[] xy = parseCoordinates();
            int x = xy[0], y = xy[1];
            updateCells(x, y);
            printCells();
            state();
        }

    }
  learner_created: true
- name: src/tictactoe/Hard.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/81/stages/451/implement#comment
status: Solved
feedback:
  message: Congratulations! Continue on <a href="https://hyperskill.org/projects/81/stages/451/implement">JetBrains
    Academy</a>
  time: Thu, 12 Nov 2020 20:55:01 UTC
record: -1
